#summary web.php web api.

= Web Class =

== Methods ==

=== Web::initialize() ===

  `Web::initialize` method is called automatically when you include Web.php or call it's methods or properties (using `autoload`). `Web::initialize` is responsible of initializing static properties of `Web.php` class (PHP doesn't have a support for static contructors). As a developer, you should never need to call this method directly.

=== Web::run(array $urls) ===

  `Web::run` method contains web.php's front controller logic.

==== Parameters ====

`$urls`

  This parameter defines permanent urls used in web.php based application. `$urls` parameter is an Array with a key and value pair entries. Key is a [http://en.wikipedia.org/wiki/Regular_expression regular expression].

  Here are some examples of valid urls:

  {{{

  // Use the syntax below:    
  array(
    'key' => 'value',
    ...
  )

  $urls = array(
    // IndexController->GET() or IndexController->POST()
    '/', 'IndexController',
    // HelloController->hello()
    '/hello-world' => 'HelloController->hello',
    // HelloController::helloStatic()
    '/hello-static-world' => 'HelloController::helloStatic',
    // CalculatorController::sum($x, $y), example url: /calculator/sum/5/2
    '/calculator/sum/(\d+)/(\d+)' => 'CalculatorController::sum'
  )
  }}}

  `key` is matched using this code:

  {{{
  $route = (isset($_GET['__route__'])) ? '/'. $_GET['__route__'] : '/';
  $regex = '#^' . $pattern . '$#i';
  if (preg_match($regex, $route, $matches) > 0) {
    ...
  }
  }}}

==== Examples ====

===== Example 1. =====

  `index.php:`

  {{{
  // Instantiates IndexController object and calls it's $_SERVER['REQUEST_METHOD'] method.

  Web::run(array('/' => 'IndexController'));
  }}}

  `IndexController.php:`

  {{{
  class IndexController {
    public function GET() {
      // TODO: Implement this method.
    }    
  }
  }}}

===== Example 2. =====

  `index.php:`

  {{{
  Web::run(array(
    '/' => 'IndexController',
    '/hello-world' => 'IndexController->helloWorld',
    '/hello-static-world' => 'IndexController::helloStaticWorld'
  ));
  }}}

  `IndexController.php:`

  {{{
  class IndexController {
    function GET() {
      // TODO: Implement this method.
    }    
    public function helloWorld() {
      // TODO: Implement this method.
    }    
    public static function helloStaticWorld() {
      // TODO: Implement this method.
    }    
  }
  }}}

===== Example 3. =====

  `index.php`

  {{{
  try {
    Web::run(array(
      '/calculator/sum/(\d+)/(\d+)' => 'CalculatorController->sum',
    ));
  } catch (Exception $e) {
    if ($e->getCode() == 404) {
      header($_SERVER['SERVER_PROTOCOL'] . ' 404 Not Found');
      View::render('views/404.php');
    } else {
      throw $e;
    }
  }
  }}}

  `CalculatorController.php:`

  {{{
  class CalculatorController {
    function sum($x, $y) {
      echo $x . ' + ' . $y . ' = ' . ($x + $y);
    }    
  }
  }}}

=== Web::redirect(string $url) ===

  Used to redirect a browser. It's a little bit more sophisticated `header("Location: http://www.example.com/")`.

==== Parameters ====

`$url`

  This parameter defines the redirect location. You can use absolute url (urls starting with `http://` or `https://`), server relative url (urls starting with `/`) and application relative urls. When redirecting inside web.php application, use application relative urls e.g. `calculator/sum/5/2`.