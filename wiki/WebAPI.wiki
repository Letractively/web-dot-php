#summary web.php web api.

= Web Class =

== Properties ==

=== Web::$base_url ===

=== Web::$base_path ===

=== Web::$base_root ===

== Methods ==

=== Web::initialize() ===

  `Web::initialize` method is called automatically when you include Web.php or call it's methods or properties (using `autoload`). `Web::initialize` is responsible of initializing static properties of `Web.php` class (PHP doesn't have a support for static contructors). As a developer, you should never need to call this method directly.

=== Web::run(array $urls) ===

  `Web::run` method contains web.php's front controller logic.

==== Parameters ====

`$urls`

  This parameter defines permanent urls used in web.php based application. `$urls` parameter is an Array with a key and value pair entries. Key is a [http://en.wikipedia.org/wiki/Regular_expression regular expression].

  Here are some examples of valid urls:

  {{{

  // Use the syntax below:    
  array(
    'key' => 'value',
    ...
  )

  $urls = array(
    // IndexController->GET() or IndexController->POST()
    '/', 'IndexController',
    // HelloController->hello()
    '/hello-world' => 'HelloController->hello',
    // HelloController::helloStatic()
    '/hello-static-world' => 'HelloController::helloStatic',
    // CalculatorController::sum($x, $y), example url: /calculator/sum/5/2
    '/calculator/sum/(\d+)/(\d+)' => 'CalculatorController::sum'
  )
  }}}

  `key` is matched using this code:

  {{{
  $route = (isset($_GET['__route__'])) ? '/'. $_GET['__route__'] : '/';
  $regex = '/^' . str_replace('/', '\/', $pattern) . '$/i';
  if (preg_match($regex, $route, $matches) > 0) {
    ...
  }
  }}}

==== Examples ====

===== Example 1. =====

  `index.php:`

  {{{
  // Instantiates IndexController object and calls it's $_SERVER['REQUEST_METHOD'] method.

  Web::run(array('/' => 'IndexController'));
  }}}

  `IndexController.php:`

  {{{
  class IndexController {
    public function GET() {
      // TODO: Implement this method.
    }    
  }
  }}}

===== Example 2. =====

  `index.php:`

  {{{
  Web::run(array(
    '/' => 'IndexController',
    '/hello-world' => 'IndexController->helloWorld',
    '/hello-static-world' => 'IndexController::helloStaticWorld'
  ));
  }}}

  `IndexController.php:`

  {{{
  class IndexController {
    function GET() {
      // TODO: Implement this method.
    }    
    public function helloWorld() {
      // TODO: Implement this method.
    }    
    public static function helloStaticWorld() {
      // TODO: Implement this method.
    }    
  }
  }}}


=== Web::redirect(string $url [, string $controller  [, mixed $data]]) ===

  Used to redirect the browser.

==== Parameters ====

`$url`

  This parameter defines the redirect location. You can use absolute url, server relative url and application relative urls.

`$controller`

  This is optional parameter that defines what controller is executed after redirect. Default value of this parameter is false. This creates temporary url for your web application that gets merged to Web::run method's `$urls` parameter. This works only if you use application relative urls (e.g. 'hello-world' or 'calculator/sum/5/2').

`data`

  This parameter is passed to a controller specified with `$controller` parameter.